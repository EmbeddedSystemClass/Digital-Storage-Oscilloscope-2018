how to use jtag from embedded system design to program the DSO in electronic system design on atmel studio version above 4.X.

1. install "winavr" link: "http://winavr.sourceforge.net/download.html"
2. add path route in the environment varibities (this is the route of avrdude). Avrdude can be find from install location of winavr software, it is in the "bin" folder.  
   just like this: "C:\Users000\bin\". After added, you can check the avedude is configured properly or not by using CMD window.
3. open CMD window, input "avrdude", if you have confirgued. you can get the print information shown as below, these information is useful in the follow steps

Options:
  -p <partno>                Required. Specify AVR device.
  -b <baudrate>              Override RS-232 baud rate.
  -B <bitclock>              Specify JTAG/STK500v2 bit clock period (us).
  -C <config-file>           Specify location of configuration file.
  -c <programmer>            Specify programmer type.
  -D                         Disable auto erase for flash memory
  -i <delay>                 ISP Clock Delay [in microseconds]
  -P <port>                  Specify connection port.
  -F                         Override invalid signature check.
  -e                         Perform a chip erase.
  -O                         Perform RC oscillator calibration (see AVR053).
  -U <memtype>:r|w|v:<filename>[:format]
                             Memory operation specification.
                             Multiple -U options are allowed, each request
                             is performed in the order specified.
  -n                         Do not write anything to the device.
  -V                         Do not verify.
  -u                         Disable safemode, default when running from a script.
  -s                         Silent safemode operation, will not ask you if
                             fuses should be changed back.
  -t                         Enter terminal mode.
  -E <exitspec>[,<exitspec>] List programmer exit specifications.
  -x <extended_param>        Pass <extended_param> to programmer.
  -y                         Count # erase cycles in EEPROM.
  -Y <number>                Initialize erase cycle # in EEPROM.
  -v                         Verbose output. -v -v for more.
  -q                         Quell progress output. -q -q for less.
  -?                         Display this usage.                        Display this usage.
4. congragutions, you have successfully install the avrdude. in this step, we will configure the debug chain in the atmel studio by adding the "exteral tools" 
5. install the atmel studio 7.X or 6.X, open the downloaded file from LMS, you can open the MCU firmwear by using this studio. And then click "tools", you can 
find "external tools", click it and open this window, press add and input some information.
6. title: input anything you like, such as "jtagICE";
7. Command: input the route of avrdude like: "C:\Users\XXX\avrdude.exe"
8: Argument: input the command like "avrdude -p m16 -c jtag1 -P com1 -F -U flash:w:$(TargetDir)$(TargetName).hex:i" may be you need to change the com port based on you own computer, any 
change for the commands need to follow the printed options in step 3.
9:Initial directory: input like: "C:\Users\XXX\000\bin\" you can copy this input from command and delete "avrdude.exe"
10. select use output window.
11. press OK.  you can find the external debug chain in the "tools", my jtag tool shows: "jtagICE".
12. compile you code and click "tools" then click "jtagICE",after connect the jtag with your DSO board.
13. if successfully, you can view the infotmation from output window like:
avrdude.exe: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.10s

avrdude.exe: Device signature = 0x1e9403
avrdude.exe: NOTE: FLASH memory has been specified, an erase cycle will be performed
             To disable this feature, specify the -D option.
avrdude.exe: erasing chip
avrdude.exe: reading input file "C:\Users\liuhu\Desktop\bigESD\code\MCU_Firmware\UoM DSO Firmware 2014\UoM DSO Firmware 2014\Release\UoM DSO Firmware 2014.hex"
avrdude.exe: writing flash (3342 bytes):

Writing | ################################################## | 100% 1.72s

avrdude.exe: 3342 bytes of flash written
avrdude.exe: verifying flash memory against C:\Users\liuhu\Desktop\bigESD\code\MCU_Firmware\UoM DSO Firmware 2014\UoM DSO Firmware 2014\Release\UoM DSO Firmware 2014.hex:
avrdude.exe: load data flash data from input file C:\Users\liuhu\Desktop\bigESD\code\MCU_Firmware\UoM DSO Firmware 2014\UoM DSO Firmware 2014\Release\UoM DSO Firmware 2014.hex:
avrdude.exe: input file C:\Users\liuhu\Desktop\bigESD\code\MCU_Firmware\UoM DSO Firmware 2014\UoM DSO Firmware 2014\Release\UoM DSO Firmware 2014.hex contains 3342 bytes
avrdude.exe: reading on-chip flash data:

Reading | ################################################## | 100% 1.28s

avrdude.exe: verifying ...
avrdude.exe: 3342 bytes of flash verified

avrdude.exe: safemode: Fuses OK

avrdude.exe done.  Thank you.


14. finally, debug you MCU code and enjoy it.